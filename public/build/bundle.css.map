{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../SvelteKanban.svelte",
    "../../Board.svelte",
    "../../EditH2Field.svelte",
    "../../EditPField.svelte",
    "../../Item.svelte",
    "../../List.svelte",
    "../../ListContainer.svelte",
    "../../Login.svelte",
    "../../ToDoListApp.svelte"
  ],
  "sourcesContent": [
    "<div id='main' style=\"background-color: {styles.backgroundcolor}; \n                      color: {styles.textcolor};\n                      font-family: {styles.font};\">\n  {#if login}\n    <div id=\"Header\">\n      <h1>ScriptPad Kanban Board</h1>\n      <h2>{currentUserData.name}, welcome back!</h2>\n    </div>\n    {#if showUserList}\n      <UserList styles={defaultStyles} \n      />\n    {:else}\n       <Board boardInfo={Kanban.boards}\n              styles={styles}\n              update={updateCount}\n              user={currentUserData}\n              on:addboard={() => { addBoard();}}\n              on:addlist={(e) => { addList(e); }}\n              on:additem={(e) => { addItem(e); }}\n              on:deleteList={(e) => { deleteList(e); }}\n              on:deleteItem={deleteItem}\n              on:newItemMsg={newItemMsg}\n              on:newItemApp={newItemApp}\n              on:appUpdate={appUpdate}\n              on:listUpdate={listUpdate}\n      />\n   {/if}\n  {:else}\n    <h1>Person Kanban Board from ScriptPad</h1>\n    <Login  styles={defaultStyles} \n            on:loginAccepted={acceptLogin}\n    />\n  {/if}\n</div>\n\n<style>\n  #main {\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    display: flex;\n    flex-direction: column;\n    flex: 1fr;\n    text-align: left;\n    padding: 0px;\n    margin: 0px;\n    user-select: none;\n    width: 100%;\n    max-width: 100%;\n    height: 100%;\n    max-height: 100%;\n  }\n\n  #Header {\n    display: flex;\n    flex-direction: row;\n    text-align: left;\n    flex: 1fr;\n  }\n\n  #Header h1 {\n    margin: 10px;\n  }\n\n  #Header h2 {\n    margin: 20px 10px 10px auto;\n  }\n\n  :global(h1) {\n    font-size: 36px !important;\n    text-align: center;\n  }\n</style>\n\n<script>\n  import { onMount } from 'svelte';\n  import Board from './components/Board.svelte';\n  import Login from './components/Login.svelte';\n  import UserList from './components/UserList.svelte';\n  \n  let Kanban = {\n    user: {},\n    boards: [{\n      name: 'New Board',\n      lists: []\n    }]\n  };\n  let defaultStyles = {\n        backgroundcolor: 'skyblue',\n        textcolor: 'darkslateblue',\n        bordercolor: 'darkslateblue',\n        unselectTabColor: 'blue',\n        unselectTabTextColor: 'white',\n        selectTabColor: 'white',\n        selectTabTextColor: 'black'\n      };\n  let styles = defaultStyles;\n  let login = true;\n  let currentUserData = {\n    ID: 0,\n    name: 'Richard Guay',\n    login: 'raguay@customct.com',\n    passwd: 'ragjesus',\n    status: 'admin'\n  };\n  let showUserList = false;\n  let updateCount = 0;\n\n  onMount(() => {\n    //\n    // This should be loaded from the server when a user is logged in.\n    //\n    Kanban = {\n      boards: [{\n        id: 0,\n        name: 'Job One',\n        lists: [{\n          id: 1000,\n          name: 'Inbox',\n          items: [{\n            id: 1001,\n            name: 'Test',\n            description: 'This is a test item.',\n            color: ['blue'],\n            notes: [{\n              date: '01/01/2020',\n              owner: 'Richard Guay',\n              type: 'text',\n              info: 'This is a test message.'\n            }],\n            apps: []\n          }]\n        }, {\n          id: 2000,\n          name: 'Working',\n          items: [{\n            id: 2001,\n            name: 'Test',\n            description: 'This is a test item.',\n            color: ['blue'],\n            notes: [],\n            apps: []\n          }]\n        }, {\n          id: 3000,\n          name: 'Done',\n          items: [{\n            id: 3001,\n            name: 'Test',\n            description: 'This is a test item.',\n            color: ['blue'],\n            notes: [],\n            apps: []\n          }],\n        }]\n      }, {\n        id: 1,\n        name: 'Job Two',\n        lists: [{\n          id: 1000,\n          name: 'Inbox',\n          items: [{\n            id: 1001,\n            name: 'Test',\n            description: 'This is a test item.',\n            color: ['blue'],\n            notes: [],\n            apps: []\n          }]\n        }]\n      }],\n      user: {\n        ID: 0,\n        name: 'Richard Guay',\n        login: 'raguay@customct.com',\n        passwd: 'ragjesus',\n        status: 'admin'\n      }\n    }\n\n    styles = {\n      backgroundcolor: 'blue',\n      textcolor: 'white',\n      unselectTabColor: 'lightgray',\n      unselectTabTextColor: 'black',\n      selectTabColor: 'lightblue',\n      selectTabTextColor: 'black',\n      mainboardcolor:  'lightblue',\n      listcontainercolor: 'lightblue',\n      listbgcolor: '#9AC2FA',\n      listtextcolor: 'white',\n      itembgcolor: 'white',\n      itemtextcolor: 'black',\n      font: '\"Fira Code\"',\n      dialogBGColor: 'lightblue',\n      dialogTextColor: 'black'\n    }\n  })\n\n  function acceptLogin(data) {\n    currentUserData = data.detail.userdata;\n    styles = data.detail.styles;\n    login = true;\n  }\n\n  function addBoard() {\n    var newID = 0;\n    Kanban.boards.forEach((item) => {\n      if(item.id > newID) newID = item.id;\n    })\n    Kanban.boards.push({\n      id: newID + 1,\n      name: 'New Board',\n      lists: []\n    });\n    Kanban = Kanban;\n  }\n\n  function addList(e) {\n    var newID = 0;\n    Kanban.boards.map(board => {\n      if(e.detail.board === board.id) {\n        board.lists.forEach((item) => {\n          if(item.id > newID) newID = item.id;\n        });\n      }\n    });\n    newID = ((newID/1000) + 1)*1000;\n    Kanban.boards = Kanban.boards.map((board) => {\n      if(e.detail.board === board.id) {\n        board.lists.push({\n          id: newID,\n          name: 'New List',\n          items: []\n        });\n      }\n      return board;\n    });\n    Kanban = Kanban;\n    updateCount = updateCount + 1;\n  }\n\n  function addItem(e) {\n    var newID = 0;\n    Kanban.boards.map( board => {\n      if(e.detail.board === board.id) {\n        board.lists.map(list => {\n          if(e.detail.list === list.id) {\n            list.items.forEach((item) => {\n              if(item.id > newID) newID = item.id;\n            });\n          }\n        });\n      }\n    });\n    Kanban.boards = Kanban.boards.map(board => {\n      if(e.detail.board === board.id) {\n        board.lists = board.lists.map(list => {\n          if(e.detail.list == list.id) {\n            list.items.push({\n              id: newID + 1,\n              name: 'New Item',\n              description: '',\n              color: [],\n              notes: [],\n              apps: []\n            });\n          }\n          return(list);\n        });\n      }\n      return(board);\n    });\n    window.Kanban = Kanban;\n    updateCount = updateCount + 1;\n  }\n\n  function deleteList(e) {\n    Kanban.boards.map(board => {\n      if(e.detail.board === board.id) {\n        board.lists = board.lists.filter(list => e.detail.list !== list.id)\n      }\n    });\n    Kanban = Kanban;\n    updateCount = updateCount + 1;\n  }\n\n  function deleteItem(e) {\n    Kanban.boards.map(board => {\n      if(e.detail.board === board.id) {\n        board.lists.map(list => {\n          if(e.detail.list === list.id) {\n            list.items = list.items.filter(item => e.detail.item !== item.id);\n          }\n        })\n      }\n    });\n    Kanban = Kanban;\n    updateCount = updateCount + 1;\n  }\n  \n  function newItemMsg(e) {\n    Kanban.boards.map(board => {\n      if(e.detail.board === board.id) {\n        board.lists.map(list => {\n          if(e.detail.list === list.id) {\n            list.items.map( item => {\n              if(item.id === e.detail.item) {\n                var nwnotes = [];\n                nwnotes.push(e.detail.msg);\n                item.notes.forEach(note => nwnotes.push(note));\n                item.notes = nwnotes;\n              }\n            })\n          }\n        })\n      }\n    });\n    Kanban = Kanban;\n    updateCount = updateCount + 1;\n  }\n\n  function newItemApp(e) {\n    Kanban.boards.map(board => {\n      if(e.detail.board === board.id) {\n        board.lists.map(list => {\n          if(e.detail.list === list.id) {\n            list.items.map( item => {\n              if(item.id === e.detail.item) {\n                item.apps.push(e.detail.app);\n              }\n            })\n          }\n        })\n      }\n    });\n    Kanban = Kanban;\n    updateCount = updateCount + 1;\n  }\n  \n  function appUpdate(e) {\n    Kanban.boards.map(board => {\n      if(e.detail.board === board.id) {\n        board.lists.map(list => {\n          if(e.detail.list === list.id) {\n            list.items.map( item => {\n              if(item.id === e.detail.item) {\n                item.apps.map( app => {\n                  if(app.id === e.detail.app.id) {\n                    app = e.detail.app;\n                  }\n                });\n              }\n            })\n          }\n        })\n      }\n    });\n    Kanban = Kanban;\n    updateCount = updateCount + 1;\n  }\n  \n  function listUpdate(e) {\n    Kanban.boards.map(board => {\n      if(e.detail.board === board.id) {\n        board.lists.map(list => {\n          if(e.detail.list.id == list.id) {\n            list = e.detail.list;\n          }\n        });\n      }\n    });\n    Kanban = Kanban;\n    updateCount = updateCount + 1;\n  }\n</script>\n",
    "<div id='MainBoard' >\n  <div style=\"display: none;\">\n    {update}\n  </div>\n  <div id='tabs'>\n    {#each boardInfo as board, index }\n      {#if currentBoard === board.id}\n        <div class=\"tab\"\n            style=\"background-color: {styles.selectTabColor}; color: {styles.selectTabTextColor}\"\n            data-key={index}\n            on:dblclick={(e) => { editName(board.id); }}\n        >\n          <span style=\"background-color: {styles.selectTabColor}; color: {styles.selectTabTextColor}\"\n                class='tabName'>\n                {#if editNameFlag}\n                  <input type='text'\n                         bind:value={board.name}\n                         bind:this={editField}\n                         on:keydown={(e) => {if(e.code === 'Enter') editNameFlag = false; }}\n                         on:blur={() => { editNameFlag = false; }}\n                  />\n                {:else}\n                  {board.name}\n                {/if}\n          </span>\n      </div>\n      {:else}\n        <div class=\"tab\"\n             style=\"background-color: {styles.unselectTabColor}; color: {styles.unselectTabTextColor}\"\n             data-key={index}\n             on:click={() => {setBoard(board.id);}}\n        >\n            <span class='tabName'\n                  style=\"background-color: {styles.unselectTabColor}; color: {styles.unselectTabTextColor}\"\n            >\n                {board.name}\n            </span>\n        </div>\n      {/if}\n    {/each}\n    <div class=\"tab\"\n         style=\"background-color: {styles.unselectTabColor}; color: {styles.unselectTabTextColor}\"\n         data-key={-1}\n         on:click={(e) => {addBoard();}}\n    >\n      <span class='tabName'\n            style=\"background-color: {styles.unselectTabColor}; \n                   color: {styles.unselectTabTextColor};\n                   font-size: 30px; line-height: 20px;\"\n      >\n        +\n      </span>\n    </div>\n  </div>\n  <ListContainer \n    lists={boardInfo.find(board => currentBoard === board.id )}\n    styles={styles}\n    user={user}\n    on:addlist={addList}\n    on:deleteList={deleteList}\n    on:additem={addItem}\n    on:deleteItem={deleteItem}\n    on:newItemMsg={newItemMsg}\n    on:newItemApp={newItemApp}\n    on:appUpdate={appUpdate}\n    on:listUpdate={listUpdate}\n  />\n</div>\n\n<style>\n  #MainBoard {\n    display: flex;\n    flex: 1fr;\n    flex-direction: column;\n    margin: 0px;\n    padding: 10px;\n    height: 90%;\n  }\n\n  #tabs {\n    display: flex;\n    flex-direction: row;\n    margin: 0px 10px 0px 0px;\n    overflow-x: auto;\n    overflow-y: hidden;\n  }\n  \n  #tabs::-webkit-scrollbar {\n    height: 6px;\n    background-color: rgba(255,255,255,0.3);\n    border-radius: 6px;\n  }\n\n  #tabs::-webkit-scrollbar-thumb {\n    height: 6px;\n    background-color: rgba(10,10,10,0.5);\n    border-radius: 6px;\n  }\n\n  .tab {\n    border-top: 3px gray;\n    border-right: 3px gray;\n    border-left: 3px gray;\n    border-bottom: 0px;\n    border-radius: 20px 5px 0px 0px;\n    height: 1em;\n    padding: 10px;\n    cursor: pointer;\n    user-select: none;\n  }\n\n  .tab span input[type=text] {\n    background-color: rgba(255,255,255,0.3);\n    margin: 0px;\n    padding: 0px 8px;\n    border-radius: 10px;\n  }\n\n  .tabName {\n    background-color: white;\n    color: black;\n    margin: 5px;\n    white-space: nowrap;\n  }\n\n  .Selected, .Selected span {\n    background-color: lightblue;\n  }\n\n  .Unselected, .Unselected span {\n    background-color: white;\n  }\n\n</style>\n\n<script>\n  import { createEventDispatcher, tick } from 'svelte';\n  import ListContainer from './ListContainer.svelte';\n\n  export let boardInfo;\n  export let styles;\n  export let update;\n  export let user;\n  \n  let currentBoard = 0;\n  let editNameFlag = false;\n  let editField;\n  \n  const dispatch = createEventDispatcher();\n  \n  function getCurrentLists() {\n    return ;\n  }\n\n  function setBoard(ind) {\n    currentBoard = ind;\n  }\n\n  function addBoard() {\n    dispatch('addboard',{});\n  }\n\n  async function editName( num ) {\n    editNameFlag = true;\n    await tick();\n    editField.focus();\n  }\n\n  function addList(e) { \n    dispatch('addlist', {\n      board: currentBoard\n    })\n  }\n  \n  function deleteList(e) { \n    dispatch('deleteList', {\n      board: currentBoard,\n      list: e.detail.list\n    }); \n  }\n\n  function addItem(e) { \n    dispatch('additem', {\n      list: e.detail.list,\n      board: currentBoard\n    })\n  }\n\n  function deleteItem(e) {\n    dispatch('deleteItem', {\n      item: e.detail.item,\n      list: e.detail.list,\n      board: currentBoard\n    })\n  }\n\n  function newItemMsg(e) {\n    dispatch('newItemMsg', {\n      item: e.detail.item,\n      list: e.detail.list,\n      board: currentBoard,\n      msg: e.detail.msg\n    })\n  }\n  \n  function newItemApp(e) {\n    dispatch('newItemApp', {\n      item: e.detail.item,\n      list: e.detail.list,\n      board: currentBoard,\n      app: e.detail.app\n    })\n  }\n  \n  function appUpdate(e) {\n    dispatch('appUpdate', {\n      item: e.detail.item,\n      list: e.detail.list,\n      board: currentBoard,\n      app: e.detail.app\n    })\n  }\n\n  function listUpdate(e) {\n    dispatch('listUpdate', {\n      list: e.detail.list,\n      board: currentBoard\n    });\n  }\n</script>\n\n",
    "<div class='editH2Field'>\n  {#if editH2Flag}\n    <input class='eListName'\n           type='text'\n           bind:value={name}\n           bind:this={editField}\n           on:keydown={(e) => {if(e.code === 'Enter') nameChanged(); }}\n           on:blur={() => { nameChanged(); }}\n    />\n    {:else}\n      <h2\n        on:dblclick={() => { editName(); }}\n      >\n        {name}\n      </h2>\n  {/if}\n</div>\n\n<style>\n  .eListname {\n    background-color: rgba(255,255,255,0.3);\n    margin: 0px;\n    padding: 0px;\n    border-radius: 10px;\n  }\n\n  .editH2Field {\n    cursor: pointer;\n  }\n\n  .editH2Field {\n    margin: 5px 0px 10px 0px;\n  }\n\n  .editH2Field input {\n    width: 165px;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher, tick } from 'svelte';\n  \n  export let name;\n  export let styles;\n\n  let editField;\n  let editH2Flag = false;\n\n  const disbatch = createEventDispatcher();\n\n  async function editName() {\n    editH2Flag = true;\n    await tick();\n    editField.focus();\n  }\n\n  function nameChanged() {\n    disbatch('nameChanged', {\n      name: editField.value\n    });\n    editH2Flag = false;\n  }\n</script>\n\n",
    "<div class='editH2Field'>\n  {#if editH2Flag}\n    <textarea class='eListName'\n           bind:value={name}\n           bind:this={editField}\n           on:keydown={(e) => {if(e.code === 'Enter') nameChanged(); }}\n           on:blur={() => { nameChanged(); }}\n    />\n    {:else}\n      <p class='pListName'\n        on:dblclick={() => { editName(); }}\n      >\n        {name}\n      </p>\n  {/if}\n</div>\n\n<style>\n  .eListName {\n    background-color: rgba(255,255,255,0.3);\n    margin: 0px;\n    width: 100%;\n    padding: 0px;\n    border-radius: 10px;\n  }\n\n  .pListName {\n    margin: 5px;\n    padding: 0px;\n    min-height: 16px;\n  }\n\n  .editH2Field {\n    cursor: pointer;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher, tick } from 'svelte';\n  \n  export let name;\n  export let styles;\n\n  let editField;\n  let editH2Flag = false;\n\n  const disbatch = createEventDispatcher();\n\n  async function editName() {\n    editH2Flag = true;\n    await tick();\n    editField.focus();\n  }\n\n  function nameChanged() {\n    disbatch('nameChanged', {\n      name: editField.value\n    });\n    editH2Flag = false;\n  }\n</script>\n\n",
    "<div class=\"item\" \n     style=\"background-color: {styles.itembgcolor}; color: {styles.itemtextcolor};\" \n     on:dblclick={editItem} >\n  <h2>{itemInfo.name}</h2>\n  <p>{itemInfo.description}</p>\n  {#if edit}\n    <div class=\"editDialogBG\">\n      <div class=\"editDialog\" \n           style=\"background-color: {styles.dialogBGColor}; color: {styles.dialogTextColor};\"\n           on:save={saveItem}\n      >\n        <EditH2Field \n          name={itemInfo.name}\n          styles={styles}\n          on:nameChanged={nameChanged}\n        />\n        <EditPField\n          name={itemInfo.description}\n          styles={styles}\n          on:nameChanged={descriptionChanged}\n        />\n        <div class='itemContainer' >\n          {#each itemInfo.apps as app}\n            <svelte:component this={app.code} app={app} item={itemInfo} on:appUpdate={appUpdate} />\n          {/each}\n          <input\n            class=\"newMsg\"\n            type=\"text\"\n            bind:value={newMsg}\n            on:keydown={(e) => {if(e.code === 'Enter') createNewTextMsg(); }}\n          />\n          <div class='appButtons'>\n            <button on:click={createToDoList}>Todo List</button>\n          </div>\n          <div class='buttonRow'>\n            <button on:click={saveItem}>Save</button>\n            <button on:click={deleteItem}>Delete</button>\n          </div>\n          {#if itemInfo.notes.length !== 0}\n            {#each itemInfo.notes as note}\n              <div class='note'>\n                <div class='noteHeader'>\n                  <div class='noteDate'>\n                    {note.date}\n                  </div>\n                  <div class='noteWriter'>\n                    {note.owner}\n                  </div>\n                </div>\n                {#if note.type === 'text'}\n                  <p class='noteText'>{note.info}\n                {/if}\n              </div>\n            {/each}\n          {/if}\n        </div>\n      </div>\n    </div>\n  {/if}\n</div>\n\n<style>\n  .item {\n    margin: 5px 5px 10px 5px;\n    padding: 10px;\n    align-content: center;\n    border: 5px solid transparent;\n    border-radius: 5px;\n    text-align: left;\n  }\n\n  .appButtons {\n    display: flex;\n    flex-direction: row;\n    margin: 0px 0px 10px 0px;\n  }\n\n  .appButtons button {\n    padding: 5px;\n    margin: 0px 10px 0px 0px;\n    border-radius: 10px;\n    background-color: rgba(255,255,255,0.6);\n  }\n  \n  .item h2 {\n    margin: 5px 0px 10px 0px;\n  }\n\n  .newMsg {\n    margin: 5px 0px 10px 0px;\n    width: 100%;\n    background-color: rgba(255,255,255,0.6);\n    border-radius: 10px;\n    color: inherit;\n  }\n\n  .editDialogBG {\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0,0,0,0.4);\n  }\n\n  .editDialog {\n    width: 400px;\n    height: 80%;\n    margin: 100px auto;\n    display: flex;\n    flex-direction: column;\n    border: 5px solid transparent;\n    border-radius: 10px;\n  }\n\n  .itemDescription {\n    padding: 5px;\n  }\n  \n  .note {\n    margin: 5px;\n    padding: 10px;\n    background-color: rgba(255,255,255,0.6);\n    border: 3px solid transparent;\n    border-radius: 10px;\n  }\n  \n  .noteHeader {\n    display: flex;\n    flex-direction: row;\n    margin: 5px 0px 10px 0px;\n    font-size: 10px;\n  }\n\n  .noteDate {\n    flex: 1;\n  }\n\n  .noteWriter {\n  }\n  \n  .noteText {\n  }\n\n  .buttonRow {\n    display: flex;\n    flex-direction: row;\n    margin: 0px 0px 10px 0px;\n  }\n\n  .buttonRow button {\n    padding: 5px;\n    margin: 0px 10px 0px 0px;\n    border-radius: 10px;\n    background-color: rgba(255,255,255,0.6);\n  }\n\n  .itemContainer {\n    overflow-y: auto;\n    overflow-x: hidden;\n  }\n  \n  .itemContainer::-webkit-scrollbar {\n    width: 6px;\n    background-color: rgba(255,255,255,0.3);\n    border-radius: 6px;\n  }\n\n  .itemContainer::-webkit-scrollbar-thumb {\n    background-color: rgba(10,10,10,0.5);\n    border-radius: 6px;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher } from 'svelte';\n  import EditH2Field from './EditH2Field.svelte';\n  import EditPField from './EditPField.svelte';\n  import ToDoListApp from './ToDoListApp.svelte';\n  \n  export let styles;\n  export let itemInfo;\n  export let user;\n\n  let edit = false;\n  let editName = false;\n  let editNameField;\n  let newMsg;\n\n  const disbatch = createEventDispatcher();\n \n  function editItem(e) {\n    edit = true;\n  }\n\n  function deleteItem(e) {\n    disbatch('deleteItem', {\n      item: itemInfo.id\n    })\n  }\n\n  function saveItem(e) {\n    edit = false;\n  }\n\n  function nameChanged(e) {\n    itemInfo.name = e.detail.name;\n  }\n\n  function descriptionChanged(e) {\n    itemInfo.description = e.detail.name;\n  }\n\n  function createNewTextMsg() {\n    var td = new Date();\n    var tdate = td.getDate() + \"/\" + (td.getDay().toString().length === 1 ? \"0\" + td.getDay() : td.getDay()) + \"/\" + td.getFullYear() + \" \" + td.getHours() + \":\" + (td.getMinutes().toString().length === 1 ? \"0\" + td.getMinutes() : td.getMinutes()) + \":\" + (td.getSeconds().toString().length === 1 ? \"0\" + td.getSeconds() : td.getSeconds());\n    disbatch('newItemMsg',{\n      item: itemInfo.id,\n      msg: {\n        id: 100,\n        date: tdate,\n        owner: user.name,\n        type: 'text',\n        info: typeof newMsg !== 'undefined' ? newMsg : \"\"\n      }\n    });\n    newMsg = '';\n  }\n\n  function createToDoList() {\n    var newID = 0;\n    itemInfo.apps.map(app => { if(app.id > newID) newID = newID + 1; });\n    disbatch('newItemApp',{\n      item: itemInfo.id,\n      app: {\n        id: newID + 1,\n        name: itemInfo.name + \": \" + 'ToDoListApp',\n        code: ToDoListApp,\n        styles: [],\n        todos: []\n      }\n    });\n  }\n\n  function appUpdate(e) {\n    disbatch('appUpdate', e.detail);\n  }\n</script>\n\n",
    "<div class=\"list\" style=\"background-color: {styles.listbgcolor}; color: {styles.listtextcolor};\">\n  <div class='listheader'>\n    <EditH2Field\n      name={listInfo.name}\n      styles={styles}\n      on:nameChanged={nameChanged}\n    />\n    <span class='remove'\n      on:click={() => { deleteList(); }}\n    >-</span>\n    <span class='add'\n      on:click={() => { addItem(); }}\n    >+</span>\n  </div>\n  <div class='itemcontainer' \n       use:dndzone={{items, flipDurationMs}} \n       on:consider={handleSort}\n       on:finalize={handleSort}>\n    {#each items as item(item.id)}\n      <div animate:flip=\"{{duration: flipDurationMs}}\">\n        <Item itemInfo={item} \n            styles={styles}\n            user={user}\n            on:deleteItem={deleteItem}\n            on:newItemMsg={newItemMsg}\n            on:newItemApp={newItemApp}\n            on:appUpdate={appUpdate}\n        />\n      </div>\n    {/each}\n  </div>\n</div>\n\n<style>\n .list {\n    display: flex;\n    flex-direction: column;\n    margin: 10px;\n    width: 250px;\n    min-width: 250px;\n    padding: 0px 0px 5px 0px;\n    border: 5px solid transparent;\n    border-radius: 5px;\n    max-height: -webkit-fill-available;\n  }\n\n  .listheader {\n    display: flex;\n    flex-direction: row;\n    margin: 5px;\n  }\n  \n  .listheader .remove {\n    margin: 5px 5px 5px auto;\n    padding: 10px;\n    background-color: rgba(255,255,255,0.3);\n    border-radius: 6px;\n    cursor: pointer;\n  }\n\n  .listheader .add {\n    margin: 5px 5px 5px 5px;\n    padding: 10px;\n    background-color: rgba(255,255,255,0.3);\n    border-radius: 6px;\n    cursor: pointer;\n  }\n\n  .itemcontainer {\n    overflow-y: auto;\n    overflow-x: hidden;\n  }\n\n  .itemcontainer::-webkit-scrollbar {\n    width: 6px;\n    background-color: rgba(255,255,255,0.3);\n    border-radius: 6px;\n  }\n\n  .itemcontainer::-webkit-scrollbar-thumb {\n    background-color: rgba(10,10,10,0.5);\n    border-radius: 6px;\n  }\n</style>\n\n<script>  \n  import { createEventDispatcher, tick, onMount, beforeUpdate } from 'svelte';\n  import { flip } from 'svelte/animate';\n  import { dndzone } from 'svelte-dnd-action';\n  import EditH2Field from './EditH2Field.svelte';\n  import Item from './Item.svelte';\n  \n  export let listInfo = {\n    id: 0,\n    items: []\n  };\n  export let styles;\n  export let user;\n\n  let editNameFlag = false;\n  let editField;\n  let items = listInfo.items;\n\n  const flipDurationMs = 300;\n  const disbatch = createEventDispatcher();\n  \n  onMount(() => {\n    items = listInfo.items;\n  })\n\n  beforeUpdate(() => {\n    items = listInfo.items;\n  })\n\n  async function addItem() {\n    disbatch('addItem', {\n      list: listInfo.id\n    });\n  }\n\n  async function deleteList() {\n    disbatch('deleteList', {\n      list: listInfo.id\n    });\n  }\n  \n  async function editName() {\n    editNameFlag = true;\n    await tick();\n    editField.focus();\n  }\n\n  function deleteItem(e) {\n    disbatch('deleteItem', {\n      item: e.detail.item,\n      list: listInfo.id\n    })\n  }\n\n  function nameChanged(e) {\n    listInfo.name = e.detail.name;\n  }\n\n  function newItemMsg(e) {\n    disbatch('newItemMsg', {\n      list: listInfo.id,\n      item: e.detail.item,\n      msg: e.detail.msg\n    });\n  }\n  \n  function newItemApp(e) {\n    disbatch('newItemApp', {\n      list: listInfo.id,\n      item: e.detail.item,\n      app: e.detail.app\n    });\n  }\n  \n  function appUpdate(e) {\n    disbatch('appUpdate', {\n      list: listInfo.id,\n      item: e.detail.item,\n      app: e.detail.app\n    });\n  }\n  \n  function handleSort(e) {\n    listInfo.items = e.detail.items;\n    listInfo = listInfo;\n    disbatch('listUpdate', {\n      list: listInfo\n    })\n  }\n</script>\n\n",
    "<div id='ListsContainer' style=\"background-color: {styles.listcontainercolor};\">\n  {#if typeof lists === 'object'}\n    {#each lists.lists as list }\n      <List listInfo={list}\n            styles={styles}\n            user={user}\n            on:deleteList={(e) => { dispatch('deleteList', e.detail); }}\n            on:addItem={(e) => { dispatch('additem', e.detail)}}\n            on:deleteItem={(e) => { dispatch('deleteItem', e.detail)}}\n            on:newItemMsg={(e) => { dispatch('newItemMsg', e.detail)}}\n            on:newItemApp={(e) => { dispatch('newItemApp', e.detail)}}\n            on:appUpdate={(e) => { dispatch('appUpdate', e.detail)}}\n            on:listUpdate={(e) => { dispatch('listUpdate', e.detail)}}\n      />\n    {/each}\n  {/if}\n  <div id=\"addList\"\n       on:click={(e) => { dispatch('addlist',{}); }}\n  >\n    <p>+ New List</p>\n  </div>\n</div>\n\n<style>\n  #addList {\n    padding: 30px;\n    width: 100px;\n    max-width: 100px;\n    min-width: 100px;\n    background-color: rgba(255,255,255,0.3);\n    margin: auto 20px auto 20px;\n    cursor: pointer;\n    text-decoration: none;\n    user-select: none;\n    border-radius: 10px;\n    border: 5px solid transparent;\n    text-align: center;\n  }\n\n  #ListsContainer {\n    display: flex;\n    flex-direction: row;\n    flex: 1;\n    margin: 0px;\n    overflow-x: auto;\n    overflow-y: hidden;\n    border: 3px solid transparent;\n    border-radius: 0px 10px 10px 10px;\n  }\n  \n  #ListsContainer::-webkit-scrollbar {\n    height: 6px;\n    background-color: rgba(255,255,255,0.3);\n    border-radius: 6px;\n  }\n\n  #ListsContainer::-webkit-scrollbar-thumb {\n    height: 6px;\n    background-color: rgba(10,10,10,0.5);\n    border-radius: 6px;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher, tick } from 'svelte';\n  import List from './List.svelte';\n\n  export let lists;\n  export let styles;\n  export let user;\n  \n  const dispatch = createEventDispatcher();\n \n</script>\n\n",
    "<div id='login' style=\"background-color: {styles.backgroundcolor}; \n                       color: {styles.textcolor}; \n                       border-color: {styles.bordercolor};\">\n  <h2>Login</h2>\n  <div class='loginItem'>\n    <label for=\"name\">Name:</label>\n    <input id=\"name\" name=\"name\" type=\"text\" minlength=\"4\" bind:this={name} on:focus={(e) => { error = \"\";}} />\n  </div>\n  <div class='loginItem'>\n    <label for=\"passwd\">Password:</label>\n    <input  id=\"passwd\" name=\"passwd\" \n            type=\"password\" \n            minlength=\"8\" \n            bind:this={passwd} \n            on:keydown={event => {if(event.code === 'Enter') login();}} \n            on:focus={(e) => { error = \"\";}} />\n  </div>\n  <div class='loginItem' style=\"margin: auto;\">\n    <button on:click={login}>Submit</button>\n  </div>\n  {#if error !== null}\n    <p style=\"color: red;\">{error}</p>\n  {/if}\n</div>\n\n<style>\n  #login {\n    display: flex;\n    flex-direction: column;\n    padding: 10px;\n    margin: auto;\n    border: 3px solid;\n    border-radius: 5px;\n  }\n\n  .loginItem {\n    display: inline;\n    padding: 0px;\n    margin: 5px;\n  }\n\n  .loginItem label {\n    display: inline;\n  }\n\n  h2 {\n    font-size: 24px;\n    text-align: center;\n    margin: 5px auto 20px auto;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n\n  export let styles;\n\n  let name;\n  let passwd;\n  let error = null;\n  \n  function login() {\n    var loginable = false;\n    \n    if(!loginable) {\n      //\n      // Tell the user the information is incorrect.\n      //\n      error = \"Sorry, these login details are incorrect.\";\n    }\n  }\n</script>\n\n",
    "<div class=\"ToDoList\">\n  <EditH2Field \n    name={app.name}\n    styles={app.styles}\n    on:nameChanged={nameChanged}\n  />\n  <input \n    class='todoInput'\n    type='text'\n    bind:value={newToDo}\n    on:keydown={(e) => {if(e.code === 'Enter') createNewTodo(); }}\n  />\n  <div class=\"todoContainer\" >\n    {#each app.todos as todo}\n      {#if !todo.done}\n        <p on:click={(e) => { todo.done = true; setDone(todo); }} > ⃞  {todo.description} </p>\n      {/if}\n    {/each}\n    {#each app.todos as todo}\n      {#if todo.done}\n        <p on:click={(e) => { todo.done = false; setNotDone(todo); }} >☑ {todo.description}</p>\n      {/if}\n    {/each}\n  </div>\n</div>\n\n<style>\n  .ToDoList {\n    display: flex;\n    flex-direction: column;\n    margin: 5px 0px 5px 10px;\n  }\n\n  .todoContainer {\n    margin: 5px 5px 5px 10px;\n  }\n  \n  .todoInput {\n    margin: 5px 0px 10px 0px;\n    width: 100%;\n    background-color: rgba(255,255,255,0.6);\n    border-radius: 10px;\n    color: inherit;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher } from 'svelte';\n  import EditH2Field from './EditH2Field.svelte';\n \n  export let app;\n  export let item;\n\n  let newToDo;\n\n  const disbatch = createEventDispatcher();\n\n  function createNewTodo() {\n    app.todos.push({\n      description: newToDo,\n      done: false\n    });\n    newToDo = '';\n    app = app;\n    saveApp();\n  }\n\n  function saveApp() {\n    disbatch('appUpdate', {\n      item: item.id,\n      app: app\n    })\n  }\n\n  function nameChanged(e) {\n    app.name = e.detail.name;\n    saveApp();\n  }\n\n  function setDone(todo) {\n    todo.done = true;\n    var td = new Date();\n    todo.description += \" @done \" + (td.getMonth() + 1) + \"/\" + td.getDay() + \"/\" + td.getFullYear();\n    saveApp();\n  }\n\n  function setNotDone(todo) {\n    todo.done = false;\n    var dtReg = /\\s+\\@done\\s+\\d+\\/\\d+\\/\\d+/;\n    todo.description = todo.description.replace(dtReg,'');\n    saveApp();\n  }\n</script>\n"
  ],
  "names": [],
  "mappings": "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"
}